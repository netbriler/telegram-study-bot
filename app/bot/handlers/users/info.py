from app.models import User
from app.services.files import get_file
from app.services.subjects import get_subject
from telebot.types import Message, CallbackQuery

from ...base import base, callback_query_base
from ...keyboards.inline import get_subjects_inline_markup, get_subject_files_inline_markup
from ...loader import bot
from ...utils import send_message_private


@bot.message_handler(regexp='^üëÄ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüëÄ$')
@bot.message_handler(commands=['info'])
@base()
def start_info(message: Message, current_user: User):
    text = '–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: '

    send_message_private(message, text, reply_markup=get_subjects_inline_markup('info'))


@bot.callback_query_handler(func=lambda call: call.data.startswith('info'))
@callback_query_base()
def inline_info_handler(call: CallbackQuery, current_user: User):
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    if call.data == 'info_cancel':
        bot.answer_callback_query(call.id, '–û—Ç–º–µ–Ω–µ–Ω–æ')
        return bot.delete_message(chat_id, message_id)

    data = call.data.split('_')
    subject = get_subject(data[1])

    text = (f'<b>{subject.name}</b>\n\n'
            f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>{subject.audience}</b>\n'
            f'–£—á–∏—Ç–µ–ª—å: <b>{subject.teacher}</b>\n\n'
            f'{subject.info}').rstrip()

    if subject.files:
        text += '\n–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ üëá'

    if call.message.chat.type != 'private':
        text += f'<a href="tg://user?id={call.from_user.id}">‚†Ä</a>'

    bot.send_message(chat_id, text, reply_markup=get_subject_files_inline_markup(subject),
                     disable_web_page_preview=True)
    return bot.answer_callback_query(call.id, subject.name)


@bot.callback_query_handler(func=lambda call: call.data.startswith('file'))
@callback_query_base()
def inline_file_handler(call: CallbackQuery, current_user: User):
    data = call.data.split('_')
    file = get_file(data[1])
    if not file:
        return bot.answer_callback_query(call.id, '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')

    text = file.title

    if call.message.chat.type != 'private':
        text = f'{text}<a href="tg://user?id={call.from_user.id}">‚†Ä</a>'

    try:
        bot.send_document(call.message.chat.id, file.file_id, caption=text)
    except Exception as e:
        if e.error_code == 400:
            return bot.answer_callback_query(call.id, '–ü–æ—Ö–æ–∂–µ —Ñ–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω')
